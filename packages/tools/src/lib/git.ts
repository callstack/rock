import { logger, spawn, spinner } from '@rock-js/tools';

export async function gitInitStep(path: string, version: string | null) {
  if (!(await hasGitClient())) {
    logger.info('Git client not found, skipping git initialization');
    return;
  }

  if (await isGitRepo(path)) {
    logger.debug('Git repo already initialized, skipping git initialization');
    return;
  }

  const loader = spinner();
  loader.start('Initializing git repo');

  const message = `Initial commit\n\nGenerated by rock${
    version ? `@${version}` : ''
  }.`;
  await initGitRepo(path, message);

  loader.stop('Git repo initialized.');
}

async function initGitRepo(path: string, message: string) {
  try {
    await spawn('git', ['init'], { cwd: path });
    await spawn('git', ['branch', '-M', 'main'], { cwd: path });
    await spawn('git', ['add', '.'], { cwd: path });
    await spawn('git', ['commit', '-m', message], {
      cwd: path,
    });
  } catch (error) {
    logger.warn('Failed to initialize git repository', error);
  }
}

export async function hasGitClient(): Promise<boolean> {
  try {
    await spawn('git', ['--version'], { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

export async function isGitRepo(path: string): Promise<boolean> {
  try {
    await spawn('git', ['rev-parse', '--is-inside-work-tree'], {
      stdio: 'ignore',
      cwd: path,
    });
    return true;
  } catch {
    return false;
  }
}

export async function isGitDirty(dir: string) {
  const { output } = await spawn('git', ['status', '--porcelain'], {
    cwd: dir,
  });

  return output.trim() !== '';
}
